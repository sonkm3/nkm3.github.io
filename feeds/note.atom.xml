<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>nkm3 - note</title><link href="https://nkm3.org/" rel="alternate"></link><link href="https://nkm3.org/feeds/note.atom.xml" rel="self"></link><id>https://nkm3.org/</id><updated>2021-08-12T00:00:00+09:00</updated><entry><title>Making Flashcard app with Django REST framework, nuxtjs and Vuetify. part2</title><link href="https://nkm3.org/flashcard-with-django-nuxtjs-vuetify-pt2.html" rel="alternate"></link><published>2021-08-12T00:00:00+09:00</published><updated>2021-08-12T00:00:00+09:00</updated><author><name>sonkmr</name></author><id>tag:nkm3.org,2021-08-12:/flashcard-with-django-nuxtjs-vuetify-pt2.html</id><summary type="html">&lt;p&gt;Making Flashcard app with Django REST framework, nuxtjs and Vuetify.&lt;/p&gt;</summary><content type="html">&lt;h2&gt;これはなに&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Django REST frameworkとnuxtjs、Vuetifyで作った単語カード風アプリ&lt;/li&gt;
&lt;li&gt;nuxtjsとVuetifyを使ってみたくて作りはじめた&lt;/li&gt;
&lt;li&gt;ソースコードのレポジトリ &lt;a href="https://github.com/sonkm3/wordbook" rel="nofollow"&gt;https://github.com/sonkm3/wordbook&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;想定していた完成形&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;ユーザーは複数の単語帳を作れる&lt;/li&gt;
&lt;li&gt;単語帳には単語を登録できる&lt;/li&gt;
&lt;li&gt;単語のフィールドは単語と発音、ヒント、説明を登録できる&lt;/li&gt;
&lt;li&gt;単語カード画面ではランダムに単語が表示される&lt;/li&gt;
&lt;li&gt;単語カード画面には単語、発音、ヒントが表示され、裏返す的な操作をすると説明が見られる&lt;/li&gt;
&lt;li&gt;メールアドレスでログインできる&lt;/li&gt;
&lt;li&gt;認証は一旦Token認証で割り切る&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;実装内容&lt;/h2&gt;
&lt;p&gt;実装内容は大きく2種類  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;リスト表示とそれぞれの項目のCRUD処理&lt;ul&gt;
&lt;li&gt;単語帳&lt;/li&gt;
&lt;li&gt;単語のリスト表示とCRUD処理&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;単語カード画面の表示&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;構成&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;バックエンド&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Django &lt;a href="https://www.djangoproject.com" rel="nofollow"&gt;https://www.djangoproject.com&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Django REST framework &lt;a href="https://www.django-rest-framework.org" rel="nofollow"&gt;https://www.django-rest-framework.org&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;djoser &lt;a href="https://github.com/sunscrapers/djoser" rel="nofollow"&gt;https://github.com/sunscrapers/djoser&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Django Filter &lt;a href="https://github.com/carltongibson/django-filter/tree/main" rel="nofollow"&gt;https://github.com/carltongibson/django-filter/tree/main&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;drf-nested-routers &lt;a href="https://github.com/alanjds/drf-nested-routers" rel="nofollow"&gt;https://github.com/alanjds/drf-nested-routers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;django-cors-headers &lt;a href="https://github.com/adamchainz/django-cors-headers" rel="nofollow"&gt;https://github.com/adamchainz/django-cors-headers&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;フロントエンド&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;NuxtJS &lt;a href="https://nuxtjs.org" rel="nofollow"&gt;https://nuxtjs.org&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Vuetify &lt;a href="https://vuetifyjs.com/en/" rel="nofollow"&gt;https://vuetifyjs.com/en/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;フロントエンドの概要&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;手が入っているのは主にpages以下のvueファイル&lt;/li&gt;
&lt;li&gt;サインイン、トークン取得、サインアウトはnuxt/authを使っている &lt;a href="https://auth.nuxtjs.org" rel="nofollow"&gt;https://auth.nuxtjs.org&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;httpクライアントはnuxt/axios &lt;a href="https://axios.nuxtjs.org" rel="nofollow"&gt;https://axios.nuxtjs.org&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;ルーティングはnuxtjsのもの&lt;/li&gt;
&lt;li&gt;リスト表示はData tablesのCRUDのサンプルをもとにして作った &lt;a href="https://vuetifyjs.com/ja/components/data-tables/" rel="nofollow"&gt;https://vuetifyjs.com/ja/components/data-tables/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;認証について&lt;/h2&gt;
&lt;h2&gt;httpクライアント&lt;/h2&gt;
&lt;h2&gt;ルーティングの設定&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;pagesのcourse以下はディレクトリ構造でルーティングを実現&lt;/li&gt;
&lt;li&gt;バックエンドと同じく&lt;code&gt;/courses/1/words/&lt;/code&gt;のようなパスを使いたい&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;dynamic nested routes&lt;/code&gt;と呼ばれる仕組みを使って実装&lt;/p&gt;
&lt;p&gt;&lt;a href="https://nuxtjs.org/docs/2.x/features/file-system-routing#dynamic-nested-routes" rel="nofollow"&gt;https://nuxtjs.org/docs/2.x/features/file-system-routing#dynamic-nested-routes&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;ドキュメント上ではidのプレースホルダになっている箇所は&lt;code&gt;_id.vue&lt;/code&gt;とファイルになっているがディレクトリ＋index.vueファイルの組み合わせでも期待通りのルーティングがされる&lt;br&gt;
上記&lt;code&gt;/courses/1/words/&lt;/code&gt;は&lt;code&gt;/courses/1/words/index.vue&lt;/code&gt;にルーティングされる&lt;/p&gt;
&lt;pre&gt;
pages/
├── courses
│   ├── _course_id
│   │   └── words
│   │       ├── index.vue
│   │       └── practice.vue
│   └── index.vue
├── index.vue
├── inspire.vue
├── signin.vue
├── signout.vue
└── signup.vue
&lt;/pre&gt;

&lt;h2&gt;リスト表示とCRUD処理&lt;/h2&gt;
&lt;h2&gt;単語カード表示&lt;/h2&gt;</content><category term="note"></category><category term="note"></category><category term="software"></category></entry><entry><title>Making Flashcard app with Django REST framework, nuxtjs and Vuetify. part1</title><link href="https://nkm3.org/flashcard-with-django-nuxtjs-vuetify-pt1.html" rel="alternate"></link><published>2021-08-11T00:00:00+09:00</published><updated>2021-08-11T00:00:00+09:00</updated><author><name>sonkmr</name></author><id>tag:nkm3.org,2021-08-11:/flashcard-with-django-nuxtjs-vuetify-pt1.html</id><summary type="html">&lt;p&gt;Making Flashcard app with Django REST framework, nuxtjs and Vuetify.&lt;/p&gt;</summary><content type="html">&lt;h2&gt;これはなに&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Django REST frameworkとnuxtjs、Vuetifyで作った単語カード風アプリ&lt;/li&gt;
&lt;li&gt;nuxtjsとVuetifyを使ってみたくて作りはじめた&lt;/li&gt;
&lt;li&gt;ソースコードのレポジトリ &lt;a href="https://github.com/sonkm3/wordbook" rel="nofollow"&gt;https://github.com/sonkm3/wordbook&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;想定していた完成形&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;ユーザーは複数の単語帳を作れる&lt;/li&gt;
&lt;li&gt;単語帳には単語を登録できる&lt;/li&gt;
&lt;li&gt;単語のフィールドは単語と発音、ヒント、説明を登録できる&lt;/li&gt;
&lt;li&gt;単語カード画面ではランダムに単語が表示される&lt;/li&gt;
&lt;li&gt;単語カード画面には単語、発音、ヒントが表示され、裏返す的な操作をすると説明が見られる&lt;/li&gt;
&lt;li&gt;メールアドレスでログインできる&lt;/li&gt;
&lt;li&gt;認証は一旦Token認証で割り切る&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;実装内容&lt;/h2&gt;
&lt;p&gt;実装内容は大きく2種類  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;リスト表示とそれぞれの項目のCRUD処理&lt;ul&gt;
&lt;li&gt;単語帳&lt;/li&gt;
&lt;li&gt;単語のリスト表示とCRUD処理&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;単語カード画面の表示&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;構成&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;バックエンド&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Django &lt;a href="https://www.djangoproject.com" rel="nofollow"&gt;https://www.djangoproject.com&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Django REST framework &lt;a href="https://www.django-rest-framework.org" rel="nofollow"&gt;https://www.django-rest-framework.org&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;djoser &lt;a href="https://github.com/sunscrapers/djoser" rel="nofollow"&gt;https://github.com/sunscrapers/djoser&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Django Filter &lt;a href="https://github.com/carltongibson/django-filter/tree/main" rel="nofollow"&gt;https://github.com/carltongibson/django-filter/tree/main&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;drf-nested-routers &lt;a href="https://github.com/alanjds/drf-nested-routers" rel="nofollow"&gt;https://github.com/alanjds/drf-nested-routers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;django-cors-headers &lt;a href="https://github.com/adamchainz/django-cors-headers" rel="nofollow"&gt;https://github.com/adamchainz/django-cors-headers&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;フロントエンド&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;NuxtJS &lt;a href="https://nuxtjs.org" rel="nofollow"&gt;https://nuxtjs.org&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Vuetify &lt;a href="https://vuetifyjs.com/en/" rel="nofollow"&gt;https://vuetifyjs.com/en/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;バックエンドの実装&lt;/h2&gt;
&lt;h3&gt;modelの実装&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/sonkm3/wordbook/blob/main/wordbook-backend/app/models.py" rel="nofollow"&gt;https://github.com/sonkm3/wordbook/blob/main/wordbook-backend/app/models.py&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;django REST framework&lt;/code&gt;の&lt;code&gt;ModelViewSet&lt;/code&gt;と&lt;code&gt;ModelSerializer&lt;/code&gt;から使うためデフォルトのクエリセット以外に処理を書く必要がない&lt;/li&gt;
&lt;li&gt;&lt;code&gt;models.Manager&lt;/code&gt;クラスを使うことでクエリに関わる実装を少なくする&lt;ul&gt;
&lt;li&gt;単語帳に紐づいた単語を取得するクエリセットを返すメソッドを&lt;code&gt;WordManager&lt;/code&gt;クラスに用意し&lt;/li&gt;
&lt;li&gt;&lt;code&gt;viewWordViewSet&lt;/code&gt;の&lt;code&gt;get_queryset&lt;/code&gt;から&lt;code&gt;Word.objects.course()&lt;/code&gt;と呼び出すとフィルタされたクエリセットが返ってくる&lt;/li&gt;
&lt;li&gt;このクエリセットにページネーションやソートのクエリが加わっていく&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;serializerの実装&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/sonkm3/wordbook/blob/main/wordbook-backend/app/serializers.py" rel="nofollow"&gt;https://github.com/sonkm3/wordbook/blob/main/wordbook-backend/app/serializers.py&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;django REST framework&lt;/code&gt;の&lt;code&gt;ModelViewSet&lt;/code&gt;から使う想定&lt;/li&gt;
&lt;li&gt;&lt;code&gt;serializers.ModelSerializer&lt;/code&gt;を使うので書き足した箇所はバリデーションぐらい&lt;/li&gt;
&lt;li&gt;単語帳の持ち主とユーザーが一致するかのバリデーションはSerializerのバリデーションでおこなっている&lt;ul&gt;
&lt;li&gt;例えば&lt;code&gt;validate_courseメソッド&lt;/code&gt;でおこなえ、&lt;code&gt;course&lt;/code&gt;フィールドは&lt;code&gt;_course&lt;/code&gt;のようにすることで指定できる&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;viewの実装&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/sonkm3/wordbook/blob/main/wordbook-backend/app/views.py" rel="nofollow"&gt;https://github.com/sonkm3/wordbook/blob/main/wordbook-backend/app/views.py&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;django REST framework&lt;/code&gt;の&lt;code&gt;ModelViewSet&lt;/code&gt;を使っているのであまり書かなくてよいが&lt;code&gt;drf-nested-routers&lt;/code&gt;に関わる実装は必要&lt;/li&gt;
&lt;li&gt;&lt;code&gt;drf-nested-routers&lt;/code&gt;に関わる実装について&lt;ul&gt;
&lt;li&gt;&lt;code&gt;courses/{course_id}/words/&lt;/code&gt;というパスにしたかったので&lt;code&gt;drf-nested-routers&lt;/code&gt;を導入した&lt;/li&gt;
&lt;li&gt;この場合&lt;code&gt;course_id&lt;/code&gt;は&lt;code&gt;self.kwargs["course_pk"]&lt;/code&gt;としてviewにわたってくる&lt;/li&gt;
&lt;li&gt;&lt;code&gt;request.data&lt;/code&gt;には入っていないので&lt;code&gt;create&lt;/code&gt;メソッドをオーバーライドして&lt;code&gt;request.data&lt;/code&gt;に&lt;code&gt;course_pk&lt;/code&gt;を追加している&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pagination&lt;/code&gt;について&lt;ul&gt;
&lt;li&gt;フロントエンドの作りに合わせて&lt;code&gt;PageNumberPagination&lt;/code&gt;をもとにした&lt;code&gt;CustomPagination&lt;/code&gt;を作った&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;ルーティング&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/sonkm3/wordbook/blob/main/wordbook-backend/wordbook/urls.py" rel="nofollow"&gt;https://github.com/sonkm3/wordbook/blob/main/wordbook-backend/wordbook/urls.py&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;NestedSimpleRouter&lt;/code&gt;を使って&lt;code&gt;courses/{course_id}/words/&lt;/code&gt;を実現している&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;emailでのログインについて&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/sonkm3/wordbook/blob/main/wordbook-backend/app/models.py#L9-L51" rel="nofollow"&gt;https://github.com/sonkm3/wordbook/blob/main/wordbook-backend/app/models.py#L9-L51&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;CustomUser&lt;/code&gt;と&lt;code&gt;CustomUserManager&lt;/code&gt;を作って対応&lt;/li&gt;
&lt;li&gt;&lt;code&gt;create_user&lt;/code&gt;に関わる処理の変更を&lt;code&gt;CustomUserManager&lt;/code&gt;でオーバーライドする&lt;/li&gt;
&lt;li&gt;&lt;code&gt;AbstractUser&lt;/code&gt;を継承しているので&lt;code&gt;username&lt;/code&gt;の条件は&lt;code&gt;CustomUser&lt;/code&gt;でオーバーライドできる&lt;/li&gt;
&lt;li&gt;CustomUserはAbstractModelを継承しているのでfirst/last_nameなどの使わないフィールドは&lt;code&gt;Null&lt;/code&gt;を代入することで削除できる&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href="https://github.com/sonkm3/wordbook/blob/main/wordbook-backend/wordbook/settings.py" rel="nofollow"&gt;https://github.com/sonkm3/wordbook/blob/main/wordbook-backend/wordbook/settings.py&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;CustomUserクラスとemailフィールドをログイン時に使うようにする変更は&lt;code&gt;settings.py&lt;/code&gt;でおこなう&lt;ul&gt;
&lt;li&gt;&lt;code&gt;AUTH_USER_MODEL&lt;/code&gt;を上で定義した&lt;code&gt;CustomUser&lt;/code&gt;に設定(Djangoが使うユーザーモデルを変更する設定)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;DJOSER&lt;/code&gt;の&lt;code&gt;LOGIN_FIELD&lt;/code&gt;を&lt;code&gt;email&lt;/code&gt;に設定(djoserのユーザー名フィールドを変更する設定)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</content><category term="note"></category><category term="note"></category><category term="software"></category></entry></feed>